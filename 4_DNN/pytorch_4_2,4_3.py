# -*- coding: utf-8 -*-
"""pytorch_4.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19AoAOxIlJLxFVWxH65QaRIwf0BvHQpaC
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torchvision import transforms, datasets,utils
from torch.utils import data

transform = transforms.Compose([transforms.ToTensor()])

trainset = datasets.FashionMNIST(
    root = './.data/',
    train = True,
    download = True,
    transform = transform
)

testset = datasets.FashionMNIST(
    root = './.data/',
    train = False,
    download = True,
    transform = transform
)

batch_size = 16
train_loader = data.DataLoader(
    dataset = trainset,
    batch_size = batch_size
)
test_loader = data.DataLoader(
    dataset = testset,
    batch_size = batch_size
)

USE_CUDA = torch.cuda.is_available()
DEVICE = torch.device("cuda" if USE_CUDA else "cpu")

EPOCHS = 30
BATCH_SIZE = 64

class Net(nn.Module) :
  def __init__(self) :
    super(Net,self).__init__()
    self.fc1 = nn.Linear(784,256)
    self.fc2 = nn.Linear(256,128)
    self.fc3 = nn.Linear(128,10)

  def forward(self, x) :
    x = x.view(-1,784) #1차원 행렬로 만듬
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = self.fc3(x)
    return x

model = Net().to(DEVICE)
optimizer = optim.SGD(model.parameters(), lr=0.01) #model.parameters → 모델 내부 정보(파라미터 값)을 넘겨줌

def train(model, train_loader, optimizer) :
  model.train() #모델을 학습모드로 설정
  for batch_idx, (data, target) in enumerate(train_loader) :
    data, target = data.to(DEVICE), target.to(DEVICE)
    optimizer.zero_grad() #기울기 초기화 → 매번 새로운 기울기를 구해야하므로
    output = model(data)
    loss = F.cross_entropy(output, target)
    loss.backward() #backpropagation
    optimizer.step()

def evaluate(model, test_loader) :
  model.eval()
  test_loss = 0
  correct = 0
  with torch.no_grad() :
    for data, target in test_loader : 
      data, target = data.to(DEVICE), target.to(DEVICE)
      output = model(data)
      test_loss += F.cross_entropy(output, target, reduction='sum').item()
      pred = output.max(1, keepdim=True)[1]
      correct += pred.eq(target.view_as(pred)).sum().item()
  test_loss /= len(test_loader.dataset)
  test_accuracy = 100. * correct / len(test_loader.dataset)
  return test_loss, test_accuracy

for epoch in range(1, EPOCHS + 1) :
  train(model, train_loader, optimizer)
  test_loss, test_accuracy = evaluate(model, test_loader)
  print('[{}] Test Loss: {:.4f}, Accuracy: {:.2f}%'.format(epoch, test_loss, test_accuracy))

